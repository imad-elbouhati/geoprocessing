{"version":3,"file":"greiner-hormann.js","sources":["../src/vertex.js","../src/intersection.js","../src/polygon.js","../src/clip.js","../src/index.js"],"sourcesContent":["export default class Vertex {\n\n  /**\n   * Vertex representation\n   *\n   * @param {Number|Array.<Number>} x\n   * @param {Number=}               y\n   */\n  constructor (x, y) {\n    if (arguments.length === 1) {\n      // Coords\n      if (Array.isArray(x)) {\n        y = x[1];\n        x = x[0];\n      } else {\n        y = x.y;\n        x = x.x;\n      }\n    }\n\n    /**\n     * X coordinate\n     * @type {Number}\n     */\n    this.x = x;\n\n    /**\n     * Y coordinate\n     * @type {Number}\n     */\n    this.y = y;\n\n    /**\n     * Next node\n     * @type {Vertex}\n     */\n    this.next = null;\n\n    /**\n     * Previous vertex\n     * @type {Vertex}\n     */\n    this.prev = null;\n\n    /**\n     * Corresponding intersection in other polygon\n     */\n    this._corresponding = null;\n\n    /**\n     * Distance from previous\n     */\n    this._distance = 0.0;\n\n    /**\n     * Entry/exit point in another polygon\n     * @type {Boolean}\n     */\n    this._isEntry = true;\n\n    /**\n     * Intersection vertex flag\n     * @type {Boolean}\n     */\n    this._isIntersection = false;\n\n    /**\n     * Loop check\n     * @type {Boolean}\n     */\n    this._visited = false;\n  }\n\n\n  /**\n   * Creates intersection vertex\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} distance\n   * @return {Vertex}\n   */\n  static createIntersection (x, y, distance) {\n    const vertex = new Vertex(x, y);\n    vertex._distance = distance;\n    vertex._isIntersection = true;\n    vertex._isEntry = false;\n    return vertex;\n  }\n\n\n  /**\n   * Mark as visited\n   */\n  visit () {\n    this._visited = true;\n    if (this._corresponding !== null && !this._corresponding._visited) {\n        this._corresponding.visit();\n    }\n  }\n\n\n  /**\n   * Convenience\n   * @param  {Vertex}  v\n   * @return {Boolean}\n   */\n  equals (v) {\n    return this.x === v.x && this.y === v.y;\n  }\n\n\n  /**\n   * Check if vertex is inside a polygon by odd-even rule:\n   * If the number of intersections of a ray out of the point and polygon\n   * segments is odd - the point is inside.\n   * @param {Polygon} poly\n   * @return {Boolean}\n   */\n  isInside (poly) {\n    let oddNodes = false;\n    let vertex = poly.first;\n    let next = vertex.next;\n    const x = this.x;\n    const y = this.y;\n\n    do {\n      if ((vertex.y < y && next.y   >= y ||\n             next.y < y && vertex.y >= y) &&\n          (vertex.x <= x || next.x <= x)) {\n        oddNodes ^= (vertex.x + (y - vertex.y) /\n              (next.y - vertex.y) * (next.x - vertex.x) < x);\n      }\n\n      vertex = vertex.next;\n      next = vertex.next || poly.first;\n    } while (!vertex.equals(poly.first));\n\n    return oddNodes;\n  }\n}\n","export default class Intersection {\n\n\n  /**\n   * @param {Vertex} s1\n   * @param {Vertex} s2\n   * @param {Vertex} c1\n   * @param {Vertex} c2\n   */\n  constructor(s1, s2, c1, c2) {\n\n    /**\n     * @type {Number}\n     */\n    this.x = 0.0;\n\n    /**\n     * @type {Number}\n     */\n    this.y = 0.0;\n\n    /**\n     * @type {Number}\n     */\n    this.toSource = 0.0;\n\n    /**\n     * @type {Number}\n     */\n    this.toClip = 0.0;\n\n    const d = (c2.y - c1.y) * (s2.x - s1.x) - (c2.x - c1.x) * (s2.y - s1.y);\n\n    if (d === 0) return;\n\n    /**\n     * @type {Number}\n     */\n    this.toSource = ((c2.x - c1.x) * (s1.y - c1.y) - (c2.y - c1.y) * (s1.x - c1.x)) / d;\n\n    /**\n     * @type {Number}\n     */\n    this.toClip = ((s2.x - s1.x) * (s1.y - c1.y) - (s2.y - s1.y) * (s1.x - c1.x)) / d;\n\n    if (this.valid()) {\n        this.x = s1.x + this.toSource * (s2.x - s1.x);\n        this.y = s1.y + this.toSource * (s2.y - s1.y);\n    }\n  }\n\n\n  /**\n   * @return {Boolean}\n   */\n  valid () {\n      return (0 < this.toSource && this.toSource < 1) && (0 < this.toClip && this.toClip < 1);\n  }\n}\n","import Vertex from './vertex';\nimport Intersection from './intersection';\n\n\nexport default class Polygon {\n\n\n  /**\n   * Polygon representation\n   * @param {Array.<Array.<Number>>} p\n   * @param {Boolean=}               arrayVertices\n   */\n  constructor (p, arrayVertices) {\n\n    /**\n     * @type {Vertex}\n     */\n    this.first = null;\n\n    /**\n     * @type {Number}\n     */\n    this.vertices = 0;\n\n    /**\n     * @type {Vertex}\n     */\n    this._lastUnprocessed = null;\n\n    /**\n     * Whether to handle input and output as [x,y] or {x:x,y:y}\n     * @type {Boolean}\n     */\n    this._arrayVertices = (typeof arrayVertices === \"undefined\") ?\n        Array.isArray(p[0]) :\n        arrayVertices;\n\n    for (let i = 0, len = p.length; i < len; i++) {\n      this.addVertex(new Vertex(p[i]));\n    }\n  }\n\n\n  /**\n   * Add a vertex object to the polygon\n   * (vertex is added at the 'end' of the list')\n   *\n   * @param vertex\n   */\n  addVertex (vertex) {\n    if (this.first === null) {\n      this.first      = vertex;\n      this.first.next = vertex;\n      this.first.prev = vertex;\n    } else {\n      const next = this.first;\n      const prev = next.prev;\n\n      next.prev   = vertex;\n      vertex.next = next;\n      vertex.prev = prev;\n      prev.next   = vertex;\n    }\n    this.vertices++;\n  }\n\n\n  /**\n   * Inserts a vertex inbetween start and end\n   *\n   * @param {Vertex} vertex\n   * @param {Vertex} start\n   * @param {Vertex} end\n   */\n  insertVertex (vertex, start, end) {\n    let prev, curr = start;\n\n    while (!curr.equals(end) && curr._distance < vertex._distance) {\n      curr = curr.next;\n    }\n\n    vertex.next = curr;\n    prev        = curr.prev;\n\n    vertex.prev = prev;\n    prev.next   = vertex;\n    curr.prev   = vertex;\n\n    this.vertices++;\n  }\n\n  /**\n   * Get next non-intersection point\n   * @param  {Vertex} v\n   * @return {Vertex}\n   */\n  getNext (v) {\n    let c = v;\n    while (c._isIntersection) c = c.next;\n    return c;\n  }\n\n\n  /**\n   * Unvisited intersection\n   * @return {Vertex}\n   */\n  getFirstIntersect () {\n    let v = this._firstIntersect || this.first;\n\n    do {\n      if (v._isIntersection && !v._visited) break;\n\n      v = v.next;\n    } while (!v.equals(this.first));\n\n    this._firstIntersect = v;\n    return v;\n  }\n\n\n  /**\n   * Does the polygon have unvisited vertices\n   * @return {Boolean} [description]\n   */\n  hasUnprocessed () {\n    let v = this._lastUnprocessed || this.first;\n    do {\n      if (v._isIntersection && !v._visited) {\n        this._lastUnprocessed = v;\n        return true;\n      }\n\n      v = v.next;\n    } while (!v.equals(this.first));\n\n    this._lastUnprocessed = null;\n    return false;\n  }\n\n\n  /**\n   * The output depends on what you put in, arrays or objects\n   * @return {Array.<Array<Number>|Array.<Object>}\n   */\n  getPoints () {\n    const points = [];\n    let v = this.first;\n\n    if (this._arrayVertices) {\n      do {\n        points.push([v.x, v.y]);\n        v = v.next;\n      } while (v !== this.first);\n    } else {\n      do {\n        points.push({\n          x: v.x,\n          y: v.y\n        });\n        v = v.next;\n      } while (v !== this.first);\n    }\n\n    return points;\n  }\n\n  /**\n   * Clip polygon against another one.\n   * Result depends on algorithm direction:\n   *\n   * Intersection: forwards forwards\n   * Union:        backwars backwards\n   * Diff:         backwards forwards\n   *\n   * @param {Polygon} clip\n   * @param {Boolean} sourceForwards\n   * @param {Boolean} clipForwards\n   */\n  clip (clip, sourceForwards, clipForwards) {\n    let sourceVertex = this.first;\n    let clipVertex = clip.first;\n    let sourceInClip, clipInSource;\n\n    const isUnion        = !sourceForwards && !clipForwards;\n    const isIntersection = sourceForwards && clipForwards;\n    const isDiff         = !isUnion && !isIntersection;\n\n    // calculate and mark intersections\n    do {\n      if (!sourceVertex._isIntersection) {\n        do {\n          if (!clipVertex._isIntersection) {\n            const i = new Intersection(\n              sourceVertex,\n              this.getNext(sourceVertex.next),\n              clipVertex, clip.getNext(clipVertex.next)\n            );\n\n            if (i.valid()) {\n              const sourceIntersection = Vertex.createIntersection(i.x, i.y, i.toSource);\n              const clipIntersection   = Vertex.createIntersection(i.x, i.y, i.toClip);\n\n              sourceIntersection._corresponding = clipIntersection;\n              clipIntersection._corresponding   = sourceIntersection;\n\n              this.insertVertex(sourceIntersection, sourceVertex, this.getNext(sourceVertex.next));\n              clip.insertVertex(clipIntersection, clipVertex, clip.getNext(clipVertex.next));\n            }\n          }\n          clipVertex = clipVertex.next;\n        } while (!clipVertex.equals(clip.first));\n      }\n\n      sourceVertex = sourceVertex.next;\n    } while (!sourceVertex.equals(this.first));\n\n      // phase two - identify entry/exit points\n    sourceVertex = this.first;\n    clipVertex   = clip.first;\n\n    sourceInClip = sourceVertex.isInside(clip);\n    clipInSource = clipVertex.isInside(this);\n\n    sourceForwards ^= sourceInClip;\n    clipForwards ^= clipInSource;\n\n    do {\n      if (sourceVertex._isIntersection) {\n        sourceVertex._isEntry = sourceForwards;\n        sourceForwards = !sourceForwards;\n      }\n      sourceVertex = sourceVertex.next;\n    } while (!sourceVertex.equals(this.first));\n\n    do {\n      if (clipVertex._isIntersection) {\n        clipVertex._isEntry = clipForwards;\n        clipForwards = !clipForwards;\n      }\n      clipVertex = clipVertex.next;\n    } while (!clipVertex.equals(clip.first));\n\n    // phase three - construct a list of clipped polygons\n    let list = [];\n\n    while (this.hasUnprocessed()) {\n      let current = this.getFirstIntersect();\n      // keep format\n      const clipped = new Polygon([], this._arrayVertices);\n\n      clipped.addVertex(new Vertex(current.x, current.y));\n      do {\n        current.visit();\n        if (current._isEntry) {\n          do {\n            current = current.next;\n            clipped.addVertex(new Vertex(current.x, current.y));\n          } while (!current._isIntersection);\n\n        } else {\n          do {\n            current = current.prev;\n            clipped.addVertex(new Vertex(current.x, current.y));\n          } while (!current._isIntersection);\n        }\n        current = current._corresponding;\n      } while (!current._visited);\n\n      list.push(clipped.getPoints());\n    }\n\n    if (list.length === 0) {\n      if (isUnion) {\n        if (sourceInClip)      list.push(clip.getPoints());\n        else if (clipInSource) list.push(this.getPoints());\n        else                   list.push(this.getPoints(), clip.getPoints());\n      } else if (isIntersection) { // intersection\n        if (sourceInClip)      list.push(this.getPoints());\n        else if (clipInSource) list.push(clip.getPoints());\n      } else { // diff\n        if (sourceInClip)      list.push(clip.getPoints(), this.getPoints());\n        else if (clipInSource) list.push(this.getPoints(), clip.getPoints());\n        else                   list.push(this.getPoints());\n      }\n      if (list.length === 0) list = null;\n    }\n\n    return list;\n  }\n}\n","import Polygon from './polygon';\n\n/**\n * Clip driver\n * @param  {Array.<Array.<Number>>} polygonA\n * @param  {Array.<Array.<Number>>} polygonB\n * @param  {Boolean}                sourceForwards\n * @param  {Boolean}                clipForwards\n * @return {Array.<Array.<Number>>}\n */\nexport default function (polygonA, polygonB, eA, eB) {\n  const source = new Polygon(polygonA);\n  const clip = new Polygon(polygonB);\n  return source.clip(clip, eA, eB);\n}\n","import boolean from './clip';\n\n/**\n * @param  {Array.<Array.<Number>|Array.<Object>} polygonA\n * @param  {Array.<Array.<Number>|Array.<Object>} polygonB\n * @return {Array.<Array.<Number>>|Array.<Array.<Object>|Null}\n */\nexport function union (polygonA, polygonB) {\n  return boolean(polygonA, polygonB, false, false);\n}\n\n/**\n * @param  {Array.<Array.<Number>|Array.<Object>} polygonA\n * @param  {Array.<Array.<Number>|Array.<Object>} polygonB\n * @return {Array.<Array.<Number>>|Array.<Array.<Object>>|Null}\n */\nexport function intersection (polygonA, polygonB) {\n  return boolean(polygonA, polygonB, true, true);\n}\n\n/**\n * @param  {Array.<Array.<Number>|Array.<Object>} polygonA\n * @param  {Array.<Array.<Number>|Array.<Object>} polygonB\n * @return {Array.<Array.<Number>>|Array.<Array.<Object>>|Null}\n */\nexport function diff (polygonA, polygonB) {\n  return boolean(polygonA, polygonB, false, true);\n}\n\nexport const clip = boolean;\n"],"names":["let","const","this","clip"],"mappings":";;;;;;;;;;;;;;;EAAe,IAAM,MAAM,GAQzB,eAAW,EAAE,CAAC,EAAE,CAAC,EAAE;IACjB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;;MAE1B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACpB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACT,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;OACV,MAAM;QACL,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;OACT;KACF;;;;;;IAMD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;;;;;;IAMX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;;;;;;IAMX,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;;;;IAMjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;;;IAKjB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;;;;IAK3B,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;;;;;;IAMrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;;;;IAMrB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;;;;;;IAM7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;EACxB,EAAC;;;EAGH;;;;;;;EAOA,OAAS,kBAAkB,gCAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE;IAC3C,IAAQ,MAAM,GAAG,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,OAAS,MAAM,CAAC;EAChB,EAAC;;;EAGH;;;EAGA,iBAAE,KAAK,qBAAI;IACP,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE;QAC/D,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;KAC/B;EACH,EAAC;;;EAGH;;;;;EAKA,iBAAE,MAAM,oBAAE,CAAC,EAAE;IACT,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC1C,EAAC;;;EAGH;;;;;;;EAOA,iBAAE,QAAQ,sBAAE,IAAI,EAAE;IACdA,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrBA,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;IACxBA,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACvBC,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACjBA,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;;IAEjB,GAAG;MACD,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,IAAM,CAAC;aAC7B,IAAM,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,CAAC;WAC7B,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QAClC,QAAQ,KAAK,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;eAC9B,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;OACtD;;MAED,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;MACvB,IAAM,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;KAClC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;IAEvC,OAAS,QAAQ,CAAC;EAClB,CAAC;;EC1IY,IAAM,YAAY,GAS/B,qBAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;;;;;IAK1B,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;;;;;IAKb,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;;;;;IAKb,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;;;;IAKpB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;;IAElBA,IAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;;IAExE,IAAI,CAAC,KAAK,CAAC,IAAE,SAAO;;;;;IAKtB,IAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;;;;IAKtF,IAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;IAElF,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE;QAChB,IAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAChD,IAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KACjD;EACH,EAAC;;;EAGH;;;EAGA,uBAAE,KAAK,qBAAI;MACL,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;EAC5F,CAAC;;ECrDH,IAAqB,OAAO,GAQ1B,gBAAW,EAAE,CAAC,EAAE,aAAa,EAAE;;;;;;;IAK7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;;;;IAKlB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;;;;;IAKlB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;;;;;;IAM/B,IAAM,CAAC,cAAc,GAAG,CAAC,OAAO,aAAa,KAAK,WAAW;QACzD,KAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB,aAAa,CAAC;;IAElB,KAAKD,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;MAC5CE,MAAI,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAClC;EACH,EAAC;;;EAGH;;;;;;EAMA,kBAAE,SAAS,uBAAE,MAAM,EAAE;IACjB,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;MACvB,IAAI,CAAC,KAAK,MAAQ,MAAM,CAAC;MACzB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;MACzB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;KAC1B,MAAM;MACLD,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;MACxBA,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;MAEvB,IAAI,CAAC,IAAI,GAAK,MAAM,CAAC;MACrB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;MACnB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;MACnB,IAAI,CAAC,IAAI,GAAK,MAAM,CAAC;KACtB;IACD,IAAI,CAAC,QAAQ,EAAE,CAAC;EAClB,EAAC;;;EAGH;;;;;;;EAOA,kBAAE,YAAY,0BAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE;IAChCD,IAAI,IAAI,EAAE,IAAI,GAAG,KAAK,CAAC;;IAEvB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE;MAC7D,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;KAClB;;IAED,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,IAAI,QAAU,IAAI,CAAC,IAAI,CAAC;;IAExB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,IAAI,GAAK,MAAM,CAAC;IACrB,IAAI,CAAC,IAAI,GAAK,MAAM,CAAC;;IAErB,IAAI,CAAC,QAAQ,EAAE,CAAC;EAClB,EAAC;;EAEH;;;;;EAKA,kBAAE,OAAO,qBAAE,CAAC,EAAE;IACVA,IAAI,CAAC,GAAG,CAAC,CAAC;IACZ,OAAS,CAAC,CAAC,eAAe,IAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAC;IACvC,OAAS,CAAC,CAAC;EACX,EAAC;;;EAGH;;;;EAIA,kBAAE,iBAAiB,iCAAI;IACrB,IAAM,CAAC,GAAG,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC;;IAE3C,GAAG;MACH,IAAM,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,CAAC,QAAQ,IAAE,QAAM;;MAE5C,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;KACZ,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;IAEhC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;IAC3B,OAAS,CAAC,CAAC;EACX,EAAC;;;EAGH;;;;EAIA,kBAAE,cAAc,8BAAI;;;IAClB,IAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC;IAC5C,GAAG;MACH,IAAM,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE;QACpCE,MAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC5B,OAAS,IAAI,CAAC;OACb;;MAED,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;KACZ,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;IAEhC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,OAAS,KAAK,CAAC;EACf,EAAC;;;EAGH;;;;EAIA,kBAAE,SAAS,yBAAI;IACXD,IAAM,MAAM,GAAG,EAAE,CAAC;IAClBD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;;IAEnB,IAAI,IAAI,CAAC,cAAc,EAAE;MACvB,GAAG;QACD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;OACZ,QAAQ,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;KAC5B,MAAM;MACL,GAAG;QACH,MAAQ,CAAC,IAAI,CAAC;UACV,CAAC,EAAE,CAAC,CAAC,CAAC;UACN,CAAC,EAAE,CAAC,CAAC,CAAC;SACP,CAAC,CAAC;QACH,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;OACZ,QAAQ,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE;KAC5B;;IAEH,OAAS,MAAM,CAAC;EAChB,EAAC;;EAEH;;;;;;;;;;;;EAYA,kBAAE,IAAI,kBAAEG,MAAI,EAAE,cAAc,EAAE,YAAY,EAAE;;;IACxCH,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9BA,IAAI,UAAU,GAAGG,MAAI,CAAC,KAAK,CAAC;IAC5BH,IAAI,YAAY,EAAE,YAAY,CAAC;;IAEjC,IAAQ,OAAO,QAAU,CAAC,cAAc,IAAI,CAAC,YAAY,CAAC;IACxDC,IAAM,cAAc,GAAG,cAAc,IAAI,YAAY,CAAC;;;IAItD,GAAG;MACD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE;QACjC,GAAG;UACD,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE;YAC/BA,IAAM,CAAC,GAAG,IAAI,YAAY;cACxB,YAAY;cACZC,MAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC;cACjC,UAAY,EAAEC,MAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;aAC1C,CAAC;;YAEF,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;cACf,IAAQ,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;cAC7E,IAAQ,gBAAgB,GAAK,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;;cAEzE,kBAAkB,CAAC,cAAc,GAAG,gBAAgB,CAAC;cACrD,gBAAgB,CAAC,cAAc,GAAK,kBAAkB,CAAC;;cAEvDD,MAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,YAAY,EAAEA,MAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;cACrFC,MAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,UAAU,EAAEA,MAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;aAChF;WACF;UACD,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;SAC9B,QAAQ,CAAC,UAAU,CAAC,MAAM,CAACA,MAAI,CAAC,KAAK,CAAC,EAAE;OAC1C;;MAED,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC;KAClC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;;IAG3C,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,UAAU,GAAKA,MAAI,CAAC,KAAK,CAAC;;IAE5B,YAAc,GAAG,YAAY,CAAC,QAAQ,CAACA,MAAI,CAAC,CAAC;IAC7C,YAAc,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;IAE3C,cAAgB,IAAI,YAAY,CAAC;IACjC,YAAc,IAAI,YAAY,CAAC;;IAE7B,GAAG;MACD,IAAI,YAAY,CAAC,eAAe,EAAE;QAChC,YAAY,CAAC,QAAQ,GAAG,cAAc,CAAC;QACvC,cAAc,GAAG,CAAC,cAAc,CAAC;OAClC;MACD,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC;KAClC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;IAE3C,GAAG;MACD,IAAI,UAAU,CAAC,eAAe,EAAE;QAC9B,UAAU,CAAC,QAAQ,GAAG,YAAY,CAAC;QACnC,YAAY,GAAG,CAAC,YAAY,CAAC;OAC9B;MACD,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;KAC9B,QAAQ,CAAC,UAAU,CAAC,MAAM,CAACA,MAAI,CAAC,KAAK,CAAC,EAAE;;;IAGzCH,IAAI,IAAI,GAAG,EAAE,CAAC;;IAEd,OAAO,IAAI,CAAC,cAAc,EAAE,EAAE;MAC9B,IAAM,OAAO,GAAGE,MAAI,CAAC,iBAAiB,EAAE,CAAC;;MAEvCD,IAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,EAAEC,MAAI,CAAC,cAAc,CAAC,CAAC;;MAErD,OAAO,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MACpD,GAAG;QACD,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,IAAI,OAAO,CAAC,QAAQ,EAAE;UACpB,GAAG;YACD,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YACvB,OAAO,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;WACrD,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE;;SAEpC,MAAM;UACL,GAAG;YACD,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YACvB,OAAO,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;WACrD,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE;SACpC;QACD,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC;OAClC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE;;MAE9B,IAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;KAChC;;IAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;MACvB,IAAM,OAAO,EAAE;QACX,IAAI,YAAY,KAAK,EAAE,IAAI,CAAC,IAAI,CAACC,MAAI,CAAC,SAAS,EAAE,CAAC,GAAC;aAC9C,IAAI,YAAY,IAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAC;6BAC9B,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAEA,MAAI,CAAC,SAAS,EAAE,CAAC,GAAC;OACtE,MAAM,IAAI,cAAc,EAAE;QACzB,IAAI,YAAY,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAC;aAC9C,IAAI,YAAY,IAAE,IAAI,CAAC,IAAI,CAACA,MAAI,CAAC,SAAS,EAAE,CAAC,GAAC;OACpD,MAAM;QACL,IAAI,YAAY,KAAK,EAAE,IAAI,CAAC,IAAI,CAACA,MAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,GAAC;aAChE,IAAI,YAAY,IAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAEA,MAAI,CAAC,SAAS,EAAE,CAAC,GAAC;6BAChD,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAC;OACpD;MACH,IAAM,IAAI,CAAC,MAAM,KAAK,CAAC,IAAE,IAAI,GAAG,IAAI,GAAC;KACpC;;IAEH,OAAS,IAAI,CAAC;EACd,CAAC;;;;;;;;;;ACvRH,EAAe,kBAAU,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE;IACnDF,IAAM,MAAM,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrCA,IAAM,IAAI,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;GAClC;;;;;;;ACPD,EAAO,SAAS,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE;IACzC,OAAO,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;GAClD;;;;;;;AAOD,EAAO,SAAS,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE;IAChD,OAAO,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;GAChD;;;;;;;AAOD,EAAO,SAAS,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE;IACxC,OAAO,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;GACjD;;AAED,AAAY,MAAC,IAAI,GAAG,OAAO;;;;;;;;;;;;;;;"}